=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.46.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

YAML Test Suite - Comprehensive Test Suite for YAML

=head1 Overview

This test suite is composed of (what will eventually be) 100s of test
directories that each represent a specific situation for a YAML processor.
Each test directory contains a number of related files, that test suites can
be made to use in interesting ways. For example:

=over

=item * Metadata about the test

=over

=item * Name (short phrase)

=item * Tags

=item * Description

=back

=item * Input YAML

=item * Canonical Output YAML

=item * Matching JSON

=item * Token stream notation

=item * Event stream notation

=item * Error data

=item * etc

=back

Not every test dir will have the same elements. Since the tests are just data,
it is up to the framework using the tests to decide which tests to use and how
to use them.

To get a quick overview of the tests you can have a look at the L<YAML Test
Matrix|http://matrix.yaml.io/> -
L<https://github.com/perlpunk/yaml-test-matrix>.

=head2 Usage

The tests are currently written in L<TestML|https://github.com/testml-lang/testml/>
under the C<test> directory on the C<master> branch.

If your language has a TestML processor, you can use these files directly.
It's recommended to use the latest release C<vYYYY-MM-DD> instead of master.

Otherwise you can use the raw data files. For that, use the latest release
under
L<https://github.com/yaml/yaml-test-suite/releases|https://github.com/yaml/yaml-test-suite/releases>:

      git clone https://github.com/yaml/yaml-test-suite -b data-YYYY-MM-DD

The releases are made from the C<data> branch, which is made from the data in
the TestML in the C<master> branch. You shouldn't use the data branch directly
as the branch is squashed and force pushed from time to time.

=head2 Updating Things

When test files change you need to update various artifacts. To do this, run
the following commands:

      make update         # Updates tags and name artifacts
      make data-update    # Updates the data branch (under ./data/)

You will need Bash, NodeJS and Perl for these things.

=head1 Libaries using this test suite

=over

=item * C

=over

=item * L<libyaml|https://github.com/yaml/libyaml>

=item * L<libfyaml|https://github.com/pantoniou/libfyaml>

=back

=item * C#

=over

=item * L<YamlDotNet|https://github.com/aaubry/YamlDotNet>

=back

=item * D

=over

=item * L<dyaml|https://github.com/dlang-community/D-YAML>

=back

=item * Delphi

=over

=item * L<Neslib.Yaml|https://github.com/neslib/Neslib.Yaml>

=back

=item * Haskell

=over

=item * L<HsYAML|https://github.com/haskell-hvr/HsYAML>

=back

=item * Javascript

=over

=item * L<yaml|https://github.com/eemeli/yaml>

=back

=item * Nim

=over

=item * L<NimYAML|https://github.com/flyx/NimYAML>

=back

=item * Perl 5

=over

=item * L<YAML::PP|https://github.com/perlpunk/YAML-PP-p5>

=back

=back

If your library is using the test suite, drop us a line and we can add it
here. It would also be nice if you could add a link back to this test suite.

=cut
